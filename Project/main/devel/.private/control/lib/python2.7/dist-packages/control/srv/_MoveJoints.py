# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control/MoveJointsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class MoveJointsRequest(genpy.Message):
  _md5sum = "98493b76a3d7b5bcfddb1b32e963c3af"
  _type = "control/MoveJointsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
int8 task
string name

float32 mask
geometry_msgs/Twist target

float32 max_speed
float32 time

bool flag

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['task','name','mask','target','max_speed','time','flag']
  _slot_types = ['int8','string','float32','geometry_msgs/Twist','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task,name,mask,target,max_speed,time,flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveJointsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.task is None:
        self.task = 0
      if self.name is None:
        self.name = ''
      if self.mask is None:
        self.mask = 0.
      if self.target is None:
        self.target = geometry_msgs.msg.Twist()
      if self.max_speed is None:
        self.max_speed = 0.
      if self.time is None:
        self.time = 0.
      if self.flag is None:
        self.flag = False
    else:
      self.task = 0
      self.name = ''
      self.mask = 0.
      self.target = geometry_msgs.msg.Twist()
      self.max_speed = 0.
      self.time = 0.
      self.flag = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.task
      buff.write(_get_struct_b().pack(_x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f6d2fB().pack(_x.mask, _x.target.linear.x, _x.target.linear.y, _x.target.linear.z, _x.target.angular.x, _x.target.angular.y, _x.target.angular.z, _x.max_speed, _x.time, _x.flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.target is None:
        self.target = geometry_msgs.msg.Twist()
      end = 0
      start = end
      end += 1
      (self.task,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 61
      (_x.mask, _x.target.linear.x, _x.target.linear.y, _x.target.linear.z, _x.target.angular.x, _x.target.angular.y, _x.target.angular.z, _x.max_speed, _x.time, _x.flag,) = _get_struct_f6d2fB().unpack(str[start:end])
      self.flag = bool(self.flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.task
      buff.write(_get_struct_b().pack(_x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f6d2fB().pack(_x.mask, _x.target.linear.x, _x.target.linear.y, _x.target.linear.z, _x.target.angular.x, _x.target.angular.y, _x.target.angular.z, _x.max_speed, _x.time, _x.flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.target is None:
        self.target = geometry_msgs.msg.Twist()
      end = 0
      start = end
      end += 1
      (self.task,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 61
      (_x.mask, _x.target.linear.x, _x.target.linear.y, _x.target.linear.z, _x.target.angular.x, _x.target.angular.y, _x.target.angular.z, _x.max_speed, _x.time, _x.flag,) = _get_struct_f6d2fB().unpack(str[start:end])
      self.flag = bool(self.flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_f6d2fB = None
def _get_struct_f6d2fB():
    global _struct_f6d2fB
    if _struct_f6d2fB is None:
        _struct_f6d2fB = struct.Struct("<f6d2fB")
    return _struct_f6d2fB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control/MoveJointsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class MoveJointsResponse(genpy.Message):
  _md5sum = "b5fdd6623403b3efdfab2ff5de8c8453"
  _type = "control/MoveJointsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/Twist current

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['current']
  _slot_types = ['geometry_msgs/Twist']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveJointsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.current is None:
        self.current = geometry_msgs.msg.Twist()
    else:
      self.current = geometry_msgs.msg.Twist()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.current.linear.x, _x.current.linear.y, _x.current.linear.z, _x.current.angular.x, _x.current.angular.y, _x.current.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current is None:
        self.current = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.current.linear.x, _x.current.linear.y, _x.current.linear.z, _x.current.angular.x, _x.current.angular.y, _x.current.angular.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.current.linear.x, _x.current.linear.y, _x.current.linear.z, _x.current.angular.x, _x.current.angular.y, _x.current.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current is None:
        self.current = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.current.linear.x, _x.current.linear.y, _x.current.linear.z, _x.current.angular.x, _x.current.angular.y, _x.current.angular.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
class MoveJoints(object):
  _type          = 'control/MoveJoints'
  _md5sum = '6637c617ed353a69ab1f189297893290'
  _request_class  = MoveJointsRequest
  _response_class = MoveJointsResponse
