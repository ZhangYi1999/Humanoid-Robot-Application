// Generated by gencpp from file control/MoveJointsRequest.msg
// DO NOT EDIT!


#ifndef CONTROL_MESSAGE_MOVEJOINTSREQUEST_H
#define CONTROL_MESSAGE_MOVEJOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>

namespace control
{
template <class ContainerAllocator>
struct MoveJointsRequest_
{
  typedef MoveJointsRequest_<ContainerAllocator> Type;

  MoveJointsRequest_()
    : task(0)
    , name()
    , mask(0.0)
    , target()
    , max_speed(0.0)
    , time(0.0)
    , flag(false)  {
    }
  MoveJointsRequest_(const ContainerAllocator& _alloc)
    : task(0)
    , name(_alloc)
    , mask(0.0)
    , target(_alloc)
    , max_speed(0.0)
    , time(0.0)
    , flag(false)  {
  (void)_alloc;
    }



   typedef int8_t _task_type;
  _task_type task;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef float _mask_type;
  _mask_type mask;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _target_type;
  _target_type target;

   typedef float _max_speed_type;
  _max_speed_type max_speed;

   typedef float _time_type;
  _time_type time;

   typedef uint8_t _flag_type;
  _flag_type flag;





  typedef boost::shared_ptr< ::control::MoveJointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control::MoveJointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveJointsRequest_

typedef ::control::MoveJointsRequest_<std::allocator<void> > MoveJointsRequest;

typedef boost::shared_ptr< ::control::MoveJointsRequest > MoveJointsRequestPtr;
typedef boost::shared_ptr< ::control::MoveJointsRequest const> MoveJointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control::MoveJointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control::MoveJointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::control::MoveJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control::MoveJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control::MoveJointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control::MoveJointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::MoveJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::MoveJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control::MoveJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98493b76a3d7b5bcfddb1b32e963c3af";
  }

  static const char* value(const ::control::MoveJointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98493b76a3d7b5bcULL;
  static const uint64_t static_value2 = 0xfddb1b32e963c3afULL;
};

template<class ContainerAllocator>
struct DataType< ::control::MoveJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control/MoveJointsRequest";
  }

  static const char* value(const ::control::MoveJointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control::MoveJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
int8 task\n\
string name\n\
\n\
float32 mask\n\
geometry_msgs/Twist target\n\
\n\
float32 max_speed\n\
float32 time\n\
\n\
bool flag\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::control::MoveJointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control::MoveJointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task);
      stream.next(m.name);
      stream.next(m.mask);
      stream.next(m.target);
      stream.next(m.max_speed);
      stream.next(m.time);
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveJointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control::MoveJointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control::MoveJointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "task: ";
    Printer<int8_t>::stream(s, indent + "  ", v.task);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "mask: ";
    Printer<float>::stream(s, indent + "  ", v.mask);
    s << indent << "target: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
    s << indent << "max_speed: ";
    Printer<float>::stream(s, indent + "  ", v.max_speed);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MESSAGE_MOVEJOINTSREQUEST_H
